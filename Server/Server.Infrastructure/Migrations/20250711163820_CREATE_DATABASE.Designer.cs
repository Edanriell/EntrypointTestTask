// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server.Infrastructure;

#nullable disable

namespace Server.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250711163820_CREATE_DATABASE")]
    partial class CREATE_DATABASE
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer")
                        .HasColumnName("roles_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_role_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_role_user_users_id");

                    b.ToTable("role_user", (string)null);
                });

            modelBuilder.Entity("Server.Domain.OrderItems.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("product_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_order_products");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_products_order_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_products_product_id");

                    b.HasIndex("OrderId", "ProductId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_products_order_id_product_id");

                    b.ToTable("order_products", (string)null);
                });

            modelBuilder.Entity("Server.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered_at");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_number");

                    b.Property<string>("RefundReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("refund_reason");

                    b.Property<string>("ReturnReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("return_reason");

                    b.Property<DateTime?>("ShippedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("shipped_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tracking_number");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_orders_client_id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_orders_created_at");

                    b.HasIndex("OrderNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_orders_order_number");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_orders_status");

                    b.HasIndex("TrackingNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_orders_tracking_number");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Server.Domain.Payments.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("PaymentCompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_completed_at");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("payment_reference");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_status");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_payments_created_at");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_payments_order_id");

                    b.HasIndex("PaymentStatus")
                        .HasDatabaseName("ix_payments_payment_status");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("Server.Domain.Payments.Refund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("refund_reason");

                    b.Property<string>("RefundFailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("refund_failure_reason");

                    b.Property<string>("RefundReference")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("refund_reference");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("refund_status");

                    b.HasKey("Id")
                        .HasName("pk_refunds");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_refunds_created_at");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_refunds_payment_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_refunds_status");

                    b.ToTable("refunds", (string)null);
                });

            modelBuilder.Entity("Server.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastRestockedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_restocked_at");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("name");

                    b.Property<int>("Reserved")
                        .HasColumnType("integer")
                        .HasColumnName("reserved");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_products_created_at");

                    b.HasIndex("LastUpdatedAt")
                        .HasDatabaseName("ix_products_last_updated_at");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_products_name");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_products_status");

                    b.HasIndex("Status", "Stock")
                        .HasDatabaseName("ix_products_status_stock");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Server.Domain.Users.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_name");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "users:read"
                        },
                        new
                        {
                            Id = 2,
                            Name = "users:write"
                        },
                        new
                        {
                            Id = 3,
                            Name = "users:delete"
                        },
                        new
                        {
                            Id = 4,
                            Name = "users:manage"
                        },
                        new
                        {
                            Id = 5,
                            Name = "clients:read"
                        },
                        new
                        {
                            Id = 6,
                            Name = "clients:write"
                        },
                        new
                        {
                            Id = 7,
                            Name = "clients:delete"
                        },
                        new
                        {
                            Id = 8,
                            Name = "clients:manage"
                        },
                        new
                        {
                            Id = 9,
                            Name = "products:read"
                        },
                        new
                        {
                            Id = 10,
                            Name = "products:write"
                        },
                        new
                        {
                            Id = 11,
                            Name = "products:delete"
                        },
                        new
                        {
                            Id = 12,
                            Name = "products:manage"
                        },
                        new
                        {
                            Id = 13,
                            Name = "orders:read"
                        },
                        new
                        {
                            Id = 14,
                            Name = "orders:write"
                        },
                        new
                        {
                            Id = 15,
                            Name = "orders:delete"
                        },
                        new
                        {
                            Id = 16,
                            Name = "orders:process"
                        },
                        new
                        {
                            Id = 17,
                            Name = "orders:manage"
                        },
                        new
                        {
                            Id = 18,
                            Name = "payments:read"
                        },
                        new
                        {
                            Id = 19,
                            Name = "payments:write"
                        },
                        new
                        {
                            Id = 20,
                            Name = "payments:refund"
                        },
                        new
                        {
                            Id = 21,
                            Name = "payments:manage"
                        });
                });

            modelBuilder.Entity("Server.Domain.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "OrderManager"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ProductManager"
                        },
                        new
                        {
                            Id = 6,
                            Name = "UserManager"
                        },
                        new
                        {
                            Id = 4,
                            Name = "PaymentManager"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("Server.Domain.Users.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 17
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 21
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 18
                        },
                        new
                        {
                            RoleId = 6,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 6,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 6,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 6,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 6,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 6,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 5,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 5,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 5,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 18
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 19
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 20
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 7,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 7,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 7,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 7,
                            PermissionId = 18
                        },
                        new
                        {
                            RoleId = 8,
                            PermissionId = 9
                        });
                });

            modelBuilder.Entity("Server.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("gender");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identity_id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_users_phone_number");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Server.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_role_roles_id");

                    b.HasOne("Server.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_user_users_id");
                });

            modelBuilder.Entity("Server.Domain.OrderItems.OrderProduct", b =>
                {
                    b.HasOne("Server.Domain.Orders.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_products_orders_order_id");

                    b.HasOne("Server.Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_products_product_product_id");

                    b.OwnsOne("Server.Domain.Shared.Money", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("OrderProductId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("total_price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("total_price_currency");

                            b1.HasKey("OrderProductId");

                            b1.ToTable("order_products");

                            b1.WithOwner()
                                .HasForeignKey("OrderProductId")
                                .HasConstraintName("fk_order_products_order_products_id");
                        });

                    b.OwnsOne("Server.Domain.Shared.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("OrderProductId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("unit_price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("unit_price_currency");

                            b1.HasKey("OrderProductId");

                            b1.ToTable("order_products");

                            b1.WithOwner()
                                .HasForeignKey("OrderProductId")
                                .HasConstraintName("fk_order_products_order_products_id");
                        });

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("TotalPrice")
                        .IsRequired();

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Domain.Orders.Order", b =>
                {
                    b.HasOne("Server.Domain.Users.User", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_user_client_id");

                    b.OwnsOne("Server.Domain.Shared.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("shipping_address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("shipping_address_country");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("shipping_address_street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("shipping_address_zipcode");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId")
                                .HasConstraintName("fk_orders_orders_id");
                        });

                    b.Navigation("Client");

                    b.Navigation("ShippingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Domain.Payments.Payment", b =>
                {
                    b.HasOne("Server.Domain.Orders.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_orders_order_id");

                    b.OwnsOne("Server.Domain.Shared.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("currency");

                            b1.HasKey("PaymentId");

                            b1.ToTable("payments");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId")
                                .HasConstraintName("fk_payments_payments_id");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Server.Domain.Payments.Refund", b =>
                {
                    b.HasOne("Server.Domain.Payments.Payment", "Payment")
                        .WithMany("Refunds")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refunds_payments_payment_id");

                    b.OwnsOne("Server.Domain.Shared.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("RefundId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("currency");

                            b1.HasKey("RefundId");

                            b1.ToTable("refunds");

                            b1.WithOwner()
                                .HasForeignKey("RefundId")
                                .HasConstraintName("fk_refunds_refunds_id");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Server.Domain.Products.Product", b =>
                {
                    b.OwnsOne("Server.Domain.Shared.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("price_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("price_currency");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Domain.Users.RolePermission", b =>
                {
                    b.HasOne("Server.Domain.Users.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("Server.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");
                });

            modelBuilder.Entity("Server.Domain.Users.User", b =>
                {
                    b.OwnsOne("Server.Domain.Shared.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("address_country");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("address_street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("address_zipcode");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Domain.Orders.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Server.Domain.Payments.Payment", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("Server.Domain.Users.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
